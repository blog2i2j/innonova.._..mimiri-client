import { expect, test } from '@playwright/test'
import { mimiri, withMimiriContext } from './framework/mimiri-context'
import {
	aboutView,
	changePasswordView,
	changeUsernameView,
	connectCloudView,
	deleteView,
	passwordDialog,
	settingNodes,
	titleBar,
} from './selectors'
import { createTestTree, verifyTestTree } from './notes/actions'
import { miniTestTree } from './notes/data'
import {
	appReadyCycle,
	connectLocalAccount,
	createCloudAccount,
	createLocalAccount,
	login,
	loginFail,
	logout,
} from './core/actions'
import exp from 'constants'

// test.describe.configure({ mode: 'serial' })

test.describe('account-mutations', () => {
	test('two step upgrade then downgrade', async () => {
		await withMimiriContext(async () => {
			await mimiri().home()
			await expect(titleBar.accountButton()).toBeVisible()
			await createTestTree(miniTestTree)
			await verifyTestTree(miniTestTree)
			await settingNodes.controlPanel().click()
			await expect(aboutView.accountType()).toHaveText('none')
			await createLocalAccount()
			await verifyTestTree(miniTestTree)
			await settingNodes.controlPanel().click()
			await expect(aboutView.accountType()).toHaveText('local')
			await logout()
			await login()
			await verifyTestTree(miniTestTree)
			await settingNodes.controlPanel().click()
			await expect(aboutView.accountType()).toHaveText('local')
			await connectLocalAccount()
			await verifyTestTree(miniTestTree)
			await settingNodes.controlPanel().click()
			await expect(aboutView.accountType()).toHaveText('cloud')
			await logout()
			await login()
			await verifyTestTree(miniTestTree)
			await settingNodes.controlPanel().click()
			await expect(aboutView.accountType()).toHaveText('cloud')
			await settingNodes.controlPanel().dblclick()
			await settingNodes.account().dblclick()
			await settingNodes.delete().click()
			await deleteView.deleteAccount().click()
			await deleteView.deleteData().click()
			await deleteView.noRecovery().click()
			await deleteView.password().fill(mimiri().password)
			await deleteView.submit().click()
			await expect(deleteView.submit()).not.toBeVisible()
			await expect(connectCloudView.container()).toBeVisible()
			await settingNodes.controlPanel().click()
			await expect(aboutView.accountType()).toHaveText('local')
			await logout()
			await login()
			await settingNodes.controlPanel().click()
			await expect(aboutView.accountType()).toHaveText('local')
			await verifyTestTree(miniTestTree)
			await settingNodes.account().dblclick()
			await settingNodes.delete().click()
			await deleteView.deleteAccount().click()
			await deleteView.deleteData().click()
			await deleteView.noRecovery().click()
			await deleteView.password().fill(mimiri().password)
			await deleteView.submit().click()
			await expect(deleteView.submit()).not.toBeVisible()
			await expect(settingNodes.controlPanel()).not.toBeVisible()
			await settingNodes.controlPanel().click()
			await expect(aboutView.accountType()).toHaveText('none')
			await loginFail()
		})
	})

	test('create local and delete', async () => {
		await withMimiriContext(async () => {
			await mimiri().home()
			await expect(titleBar.accountButton()).toBeVisible()
			await createTestTree(miniTestTree)
			await verifyTestTree(miniTestTree)
			await settingNodes.controlPanel().click()
			await expect(aboutView.accountType()).toHaveText('none')
			await createLocalAccount()
			await verifyTestTree(miniTestTree)
			await settingNodes.controlPanel().click()
			await expect(aboutView.accountType()).toHaveText('local')
			await logout()
			await login()
			await verifyTestTree(miniTestTree)
			await settingNodes.controlPanel().click()
			await expect(aboutView.accountType()).toHaveText('local')
			await settingNodes.controlPanel().click()
			await settingNodes.account().dblclick()
			await settingNodes.delete().click()
			await deleteView.deleteAccount().click()
			await deleteView.deleteData().click()
			await deleteView.noRecovery().click()
			await deleteView.password().fill(mimiri().password)
			await deleteView.submit().click()
			await expect(deleteView.submit()).not.toBeVisible()
			await expect(settingNodes.controlPanel()).not.toBeVisible()
			await settingNodes.controlPanel().click()
			await expect(aboutView.accountType()).toHaveText('none')
			await loginFail()
		})
	})

	test('create cloud and delete all', async () => {
		await withMimiriContext(async () => {
			await mimiri().home()
			await expect(titleBar.accountButton()).toBeVisible()
			await createTestTree(miniTestTree)
			await verifyTestTree(miniTestTree)
			await settingNodes.controlPanel().click()
			await expect(aboutView.accountType()).toHaveText('none')
			await createCloudAccount()
			await verifyTestTree(miniTestTree)
			await settingNodes.controlPanel().click()
			await expect(aboutView.accountType()).toHaveText('cloud')
			await logout()
			await login()
			await verifyTestTree(miniTestTree)
			await settingNodes.controlPanel().click()
			await expect(aboutView.accountType()).toHaveText('cloud')
			await settingNodes.controlPanel().dblclick()
			await settingNodes.account().dblclick()
			await settingNodes.delete().click()
			await deleteView.deleteAccount().click()
			await deleteView.deleteData().click()
			await deleteView.noRecovery().click()
			await deleteView.deleteLocal().click()
			await deleteView.password().fill(mimiri().password)
			await deleteView.submit().click()
			await appReadyCycle()
			await settingNodes.controlPanel().click()
			await expect(aboutView.accountType()).toHaveText('none')
			await loginFail()
		})
	})

	test('local account change username', async () => {
		await withMimiriContext(async () => {
			await mimiri().home()
			await expect(titleBar.accountButton()).toBeVisible()
			await createTestTree(miniTestTree)
			await verifyTestTree(miniTestTree)
			await createLocalAccount()
			await verifyTestTree(miniTestTree)
			await settingNodes.controlPanel().click()
			await expect(aboutView.accountType()).toHaveText('local')
			await settingNodes.account().dblclick()
			await settingNodes.username().click()
			mimiri().config.username += '_new'
			await changeUsernameView.username().fill(mimiri().config.username)
			await changeUsernameView.saveButton().click()
			await expect(passwordDialog.container()).toBeVisible()
			await passwordDialog.password().fill(mimiri().password)
			await passwordDialog.okButton().click()
			await expect(passwordDialog.container()).not.toBeVisible()
			await settingNodes.controlPanel().click()
			await expect(aboutView.username()).toHaveText(mimiri().config.username)
			await expect(aboutView.accountType()).toHaveText('local')
			await verifyTestTree(miniTestTree)
			await logout()
			await login()
			await settingNodes.controlPanel().click()
			await expect(aboutView.username()).toHaveText(mimiri().config.username)
			await expect(aboutView.accountType()).toHaveText('local')
			await verifyTestTree(miniTestTree)
			await mimiri().pause()
		})
	})

	test('cloud account change username', async () => {
		await withMimiriContext(async () => {
			await mimiri().home()
			await expect(titleBar.accountButton()).toBeVisible()
			await createTestTree(miniTestTree)
			await verifyTestTree(miniTestTree)
			await createCloudAccount()
			await verifyTestTree(miniTestTree)
			await settingNodes.controlPanel().click()
			await settingNodes.controlPanel().dblclick()
			await expect(aboutView.accountType()).toHaveText('cloud')
			await settingNodes.account().dblclick()
			await settingNodes.username().click()
			mimiri().config.username += '_new'
			await changeUsernameView.username().fill(mimiri().config.username)
			await changeUsernameView.saveButton().click()
			await expect(passwordDialog.container()).toBeVisible()
			await passwordDialog.password().fill(mimiri().password)
			await passwordDialog.okButton().click()
			await expect(passwordDialog.container()).not.toBeVisible()
			await settingNodes.controlPanel().click()
			await expect(aboutView.username()).toHaveText(mimiri().config.username)
			await expect(aboutView.accountType()).toHaveText('cloud')
			await verifyTestTree(miniTestTree)
			await logout()
			await login()
			await settingNodes.controlPanel().click()
			await expect(aboutView.username()).toHaveText(mimiri().config.username)
			await expect(aboutView.accountType()).toHaveText('cloud')
			await verifyTestTree(miniTestTree)
		})
	})

	test('local account change password', async () => {
		await withMimiriContext(async () => {
			await mimiri().home()
			await expect(titleBar.accountButton()).toBeVisible()
			await createTestTree(miniTestTree)
			await verifyTestTree(miniTestTree)
			await createLocalAccount()
			await verifyTestTree(miniTestTree)
			await settingNodes.controlPanel().click()
			await expect(aboutView.accountType()).toHaveText('local')
			await settingNodes.account().dblclick()
			await settingNodes.password().click()

			const oldPassword = mimiri().password
			mimiri().config.password = 'qwer'
			await changePasswordView.create().click()
			await changePasswordView.password().fill(mimiri().password)
			await changePasswordView.repeat().fill(mimiri().password)
			await changePasswordView.saveButton().click()

			await expect(passwordDialog.container()).toBeVisible()
			await passwordDialog.password().fill(oldPassword)
			await passwordDialog.okButton().click()
			await expect(passwordDialog.container()).not.toBeVisible()
			await settingNodes.controlPanel().click()
			await expect(aboutView.username()).toHaveText(mimiri().config.username)
			await expect(aboutView.accountType()).toHaveText('local')

			await verifyTestTree(miniTestTree)
			await logout()
			await login()
			await settingNodes.controlPanel().click()
			await expect(aboutView.username()).toHaveText(mimiri().config.username)
			await expect(aboutView.accountType()).toHaveText('local')
			await verifyTestTree(miniTestTree)
		})
	})

	test('cloud account change password', async () => {
		await withMimiriContext(async () => {
			await mimiri().home()
			await expect(titleBar.accountButton()).toBeVisible()
			await createTestTree(miniTestTree)
			await verifyTestTree(miniTestTree)
			await createCloudAccount()
			await verifyTestTree(miniTestTree)
			await settingNodes.controlPanel().click()
			await settingNodes.controlPanel().dblclick()
			await expect(aboutView.accountType()).toHaveText('cloud')
			await settingNodes.account().dblclick()
			await settingNodes.password().click()

			const oldPassword = mimiri().password
			mimiri().config.password = 'qwer'
			await changePasswordView.create().click()
			await changePasswordView.password().fill(mimiri().password)
			await changePasswordView.repeat().fill(mimiri().password)
			await changePasswordView.saveButton().click()

			await expect(passwordDialog.container()).toBeVisible()
			await passwordDialog.password().fill(oldPassword)
			await passwordDialog.okButton().click()
			await expect(passwordDialog.container()).not.toBeVisible()
			await settingNodes.controlPanel().click()
			await expect(aboutView.username()).toHaveText(mimiri().config.username)
			await expect(aboutView.accountType()).toHaveText('cloud')

			await verifyTestTree(miniTestTree)
			await logout()
			await login()
			await settingNodes.controlPanel().click()
			await expect(aboutView.username()).toHaveText(mimiri().config.username)
			await expect(aboutView.accountType()).toHaveText('cloud')
			await verifyTestTree(miniTestTree)
		})
	})

	test('local account fail change password', async () => {
		await withMimiriContext(async () => {
			await mimiri().home()
			await expect(titleBar.accountButton()).toBeVisible()
			await createTestTree(miniTestTree)
			await verifyTestTree(miniTestTree)
			await createLocalAccount()
			await verifyTestTree(miniTestTree)
			await settingNodes.controlPanel().click()
			await expect(aboutView.accountType()).toHaveText('local')
			await settingNodes.account().dblclick()
			await settingNodes.password().click()

			await changePasswordView.create().click()
			await changePasswordView.password().fill('qwer')
			await changePasswordView.repeat().fill('qwer')
			await changePasswordView.saveButton().click()

			await expect(passwordDialog.container()).toBeVisible()
			await passwordDialog.password().fill('wrong-password')
			await passwordDialog.okButton().click()
			await expect(passwordDialog.error()).toBeVisible()
			await passwordDialog.cancelButton().click()
			await logout()
			await login()
			await settingNodes.controlPanel().click()
			await expect(aboutView.username()).toHaveText(mimiri().config.username)
			await expect(aboutView.accountType()).toHaveText('local')
			await verifyTestTree(miniTestTree)
		})
	})

	test('cloud account fail change password', async () => {
		await withMimiriContext(async () => {
			await mimiri().home()
			await expect(titleBar.accountButton()).toBeVisible()
			await createTestTree(miniTestTree)
			await verifyTestTree(miniTestTree)
			await createCloudAccount()
			await verifyTestTree(miniTestTree)
			await settingNodes.controlPanel().dblclick()
			await expect(aboutView.accountType()).toHaveText('cloud')
			await settingNodes.account().dblclick()
			await settingNodes.password().click()

			await changePasswordView.create().click()
			await changePasswordView.password().fill('qwer')
			await changePasswordView.repeat().fill('qwer')
			await changePasswordView.saveButton().click()

			await expect(passwordDialog.container()).toBeVisible()
			await passwordDialog.password().fill('wrong-password')
			await passwordDialog.okButton().click()
			await expect(passwordDialog.error()).toBeVisible()
			await passwordDialog.cancelButton().click()
			await logout()
			await login()
			await settingNodes.controlPanel().click()
			await expect(aboutView.username()).toHaveText(mimiri().config.username)
			await expect(aboutView.accountType()).toHaveText('cloud')
			await verifyTestTree(miniTestTree)
		})
	})
})
